require 'dotenv/load'
require 'simplecov'

SimpleCov.start do
  root(File.join(File.dirname(__FILE__), '..'))
  coverage_dir 'reports/coverage'
  add_filter '/spec/'
  add_filter '/features/'
  add_filter '/admin/'
  add_filter '/db/'
  add_filter '/config/'
  add_group 'Models', 'app/models'
  add_group 'Controllers', 'app/controllers'
  add_group 'Helpers', 'app/helpers'
end
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
# "http://invernalia-guaraapi.herokuapp.com/materias/all?usernameAlumno=ingresante"
RSpec.configure do |config|
  config.before(:each) do
    base_api_url = ENV['URL_API']
    stub_request(:get, base_api_url + 'materias/all?usernameAlumno=ingresante')
      .with(headers: { 'Accept' => '*/*', 'User-Agent' => 'Ruby', 'API_KEY' => 'fake_key' })
      .to_return(status: 200,
                 body:
                 '{"materias":[{"id":1001,"name":"Memo2","professor":"Linus Torvalds",
                 "created_on":"2019-06-27","updated_on":null,"quota":2,"type":"tareas","requires_proyector":false,"requires_lab":false}]}')
    stub_request(:get, 'http://invernalia-guaraapi.herokuapp.com/inscripciones?usernameAlumno=pepito')
      .with(headers: { 'Accept' => '*/*', 'User-Agent' => 'Ruby', 'API_KEY' => 'fake_key' })
      .to_return(status: 200, body: '{"inscripciones":[]}')
    stub_request(:get, 'http://api.telegram.org:443/bot87123879::AAF1823/sendMessage?chat_id=182381&text=/inscripcion')
      .with(headers: {
              'Accept' => '*/*',
              'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'Api-Key' => 'fake_key',
              'Host' => 'api.telegram.org',
              'User-Agent' => 'Ruby'
            })
      .to_return(status: 200, body: [{ 'chat_id' => '141733544',
                                       'reply_markup' =>
                                        '{"inline_keyboard":[[{"text":"Memo2","callback_data":"1"}],[{"text":"Algo1","callback_data":"2"}],[{"text":"Organizacion de Datos","callback_data":"3"}]]}',
                                       'text' => 'Seleccione la materia para la inscripcion' }], headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:post, 'https://api.telegram.org/botfake_token/sendMessage')
      .with(
        body: { 'chat_id' => '141733544', 'text' => '/oferta Muestra la oferta academica' },
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200, body: '{"status": "ok"}', headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:post, 'https://api.telegram.org/botfake_token/sendMessage')
      .with(
        body: { 'chat_id' => '141733544', 'text' => '/inscripcion Permite inscribirte a materias de la oferta academica' },
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200, body: '{"status": "ok"}', headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:post, 'https://api.telegram.org/botfake_token/sendMessage')
      .with(
        body: { 'chat_id' => '141733544', 'text' => '/estado Permite consultar tu estado en una materia' },
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200, body: '{"status": "ok"}', headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:post, 'https://api.telegram.org/botfake_token/sendMessage')
      .with(
        body: { 'chat_id' => '141733544', 'text' => '/nota Permite consultar tu nota en una materia' },
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200, body: '{"status": "ok"}', headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:post, 'https://api.telegram.org/botfake_token/sendMessage')
      .with(
        body: { 'chat_id' => '141733544', 'text' => '/misInscripciones Muestra tus inscripciones' },
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200, body: '{"status": "ok"}', headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:post, 'https://api.telegram.org/botfake_token/sendMessage')
      .with(
        body: { 'chat_id' => '141733544', 'text' => '/promedio Muestra tu cantidad de materias aprobadas y el promedio' },
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200, body: '{"status": "ok"}', headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    base_api_url = ENV['URL_API']
    stub_request(:get, base_api_url + 'materias?usernameAlumno=ingresante')
      .with(
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Api-Token' => 'CPLpXxWL8TvM7IXmBRVlRWFiHIbk0jDu',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200,
                 body:
    '{"oferta":[{"codigo":1001,"nombre":"Memo2","docente":"Linus Torvalds",
    "cupo_disponible":2,"modalidad":"tareas"}]}')
  end
end

RSpec.configure do |config|
  config.before(:each) do
    base_api_url = ENV['URL_API']
    stub_request(:get, base_api_url + 'materias?usernameAlumno=falafel')
      .with(
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Api-Token' => 'CPLpXxWL8TvM7IXmBRVlRWFiHIbk0jDu',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200,
                 body:
    '{"oferta":[]}')
  end
end

RSpec.configure do |config|
  config.before(:each) do
    base_api_url = ENV['URL_API']
    stub_request(:get, base_api_url + 'inscripciones?usernameAlumno=ingresanteConInscripciones')
      .with(
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Api-Token' => 'CPLpXxWL8TvM7IXmBRVlRWFiHIbk0jDu',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200,
                 body:
    '{"inscripciones":[{"codigo":7507, "nombre":"Algo3", "docente":"Carlos Fontela"}]}')
  end
end

RSpec.configure do |config|
  config.before(:each) do
    base_api_url = ENV['URL_API']
    stub_request(:get, base_api_url + 'materias?usernameAlumno=erroroferta')
      .with(
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Api-Token' => 'CPLpXxWL8TvM7IXmBRVlRWFiHIbk0jDu',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200,
                 body:
    '{"error":"error en la oferta"}')
  end
end

RSpec.configure do |config|
  config.before(:each) do
  end
end

RSpec.configure do |config|
  config.before(:each) do
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:post, 'https://api.telegram.org/botfake_token/sendMessage')
      .with(
        body: { 'chat_id' => '141733544', 'reply_markup' => '{"inline_keyboard":[[{"text":"Memo2","callback_data":"1001"}]]}', 'text' => 'Seleccione la materia para consultar tu nota' },
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200, body: '{"status": "ok"}', headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    base_api_url = ENV['URL_API']
    stub_request(:get, base_api_url + 'materias/all?usernameAlumno=ingresante')
      .with(
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Api-Token' => 'CPLpXxWL8TvM7IXmBRVlRWFiHIbk0jDu',
          'User-Agent' => 'Faraday v0.15.4'
        }
      ).to_return(status: 200,
                  body:
                 '{"materias":[{"id":1001,"name":"Memo2","professor":"Linus Torvalds",
                 "created_on":"2019-06-27","updated_on":null,"quota":2,"type":"tareas","requires_proyector":false,"requires_lab":false}]}')
  end
end

RSpec.configure do |config|
  config.before(:each) do
    base_api_url = ENV['URL_API']
    stub_request(:get, base_api_url + 'alumnos/promedio?usernameAlumno=ingresante')
      .with(
        headers: {
          'Accept' => '*/*',
          'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Api-Token' => 'CPLpXxWL8TvM7IXmBRVlRWFiHIbk0jDu',
          'User-Agent' => 'Faraday v0.15.4'
        }
      )
      .to_return(status: 200,
                 body:
    '{"materias_aprobadas": 5, "nota_promedio": 7.75}')
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:get, 'http://invernalia-guaraapi.herokuapp.com/materias/estado?usernameAlumno=ingresante&codigoMateria=1009')
      .with(headers: { 'Accept' => '*/*', 'User-Agent' => 'Ruby', 'API_KEY' => 'fake_key' })
      .to_return(status: 200,
                 body:
               '{"nota_final":4}')
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:get, 'http://api.telegram.org:443/bot87123879::AAF1823/sendMessage?chat_id=182381&text=/nota')
      .with(headers: {
              'Accept' => '*/*',
              'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'Api-Key' => 'fake_key',
              'Host' => 'api.telegram.org',
              'User-Agent' => 'Ruby'
            })
      .to_return(status: 200, body: [{ 'chat_id' => '141733544',
                                       'reply_markup' =>
                                        '{"inline_keyboard":[[{"text":"Memo2","callback_data":"1"}],[{"text":"Algo1","callback_data":"2"}],[{"text":"Organizacion de Datos","callback_data":"3"}]]}',
                                       'text' => 'Seleccione la materia para consultar tu nota' }], headers: {})
  end
end

RSpec.configure do |config|
  config.before(:each) do
    stub_request(:get, 'http://api.telegram.org:443/bot87123879::AAF1823/sendMessage?chat_id=182381&text=/estado')
      .with(headers: {
              'Accept' => '*/*',
              'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'Api-Key' => 'fake_key',
              'Host' => 'api.telegram.org',
              'User-Agent' => 'Ruby'
            })
      .to_return(status: 200, body: [{ 'chat_id' => '141733544',
                                       'reply_markup' =>
                                        '{"inline_keyboard":[[{"text":"Memo2","callback_data":"1"}],[{"text":"Algo1","callback_data":"2"}],[{"text":"Organizacion de Datos","callback_data":"3"}]]}',
                                       'text' => 'Seleccione la materia para consultar tu estado' }], headers: {})
  end
end

RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
  #   # This allows you to limit a spec run to individual examples or groups
  #   # you care about by tagging them with `:focus` metadata. When nothing
  #   # is tagged with `:focus`, all examples get run. RSpec also provides
  #   # aliases for `it`, `describe`, and `context` that include `:focus`
  #   # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  #   config.filter_run_when_matching :focus
  #
  #   # Allows RSpec to persist some state between runs in order to support
  #   # the `--only-failures` and `--next-failure` CLI options. We recommend
  #   # you configure your source control system to ignore this file.
  #   config.example_status_persistence_file_path = "spec/examples.txt"
  #
  #   # Limits the available syntax to the non-monkey patched syntax that is
  #   # recommended. For more details, see:
  #   #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  #   config.disable_monkey_patching!
  #
  #   # This setting enables warnings. It's recommended, but in some cases may
  #   # be too noisy due to issues in dependencies.
  #   config.warnings = true
  #
  #   # Many RSpec users commonly either run the entire suite or an individual
  #   # file, and it's useful to allow more verbose output when running an
  #   # individual spec file.
  #   if config.files_to_run.one?
  #     # Use the documentation formatter for detailed output,
  #     # unless a formatter has already been configured
  #     # (e.g. via a command-line flag).
  #     config.default_formatter = "doc"
  #   end
  #
  #   # Print the 10 slowest examples and example groups at the
  #   # end of the spec run, to help surface which specs are running
  #   # particularly slow.
  #   config.profile_examples = 10
  #
  #   # Run specs in random order to surface order dependencies.
  #   # If you find an order dependency and want to debug it,
  #   # you can fix the order by providing
  #   # the seed, which is printed after each run.
  #   #     --seed 1234
  #   config.order = :random
  #
  #   # Seed global randomization in this process using the `--seed`
  #   # CLI option. Setting this allows you to use `--seed` to
  #   # deterministically reproduce
  #   # test failures related to randomization by passing the same
  #   # `--seed` value
  #   # as the one that triggered the failure.
  #   Kernel.srand config.seed
end
